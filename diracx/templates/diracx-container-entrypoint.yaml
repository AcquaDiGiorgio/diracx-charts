apiVersion: v1
kind: ConfigMap
metadata:
  name: diracx-container-entrypoint
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-3"
    "helm.sh/resource-policy": keep
data:
  entrypoint.sh: |
    #!/bin/bash
    set -euo pipefail
    IFS=$'\n\t'

    ulimit -n 8192
    eval "$(micromamba shell hook --shell=posix)" && micromamba activate base

    pip uninstall diracx -y
    {{ if .Values.diracx.pythonModulesToInstall }}
    pip install{{ if .Values.developer.offline }} --no-build-isolation{{ end }} {{- range $moduleSpec := .Values.diracx.pythonModulesToInstall }} {{ $moduleSpec }} {{- end }}
    {{- end }}
    {{ if .Values.developer.mountedPythonModulesToInstall }}
    pip install{{ if .Values.developer.offline }} --no-build-isolation{{ end }} {{- range $moduleName := .Values.developer.mountedPythonModulesToInstall }} {{ if $.Values.developer.editableMountedPythonModules }}-e {{- end }}{{ $.Values.developer.sourcePath }}/{{ $moduleName }} {{- end }}
    {{- end }}

    {{- if and .Values.developer.enabled .Values.developer.enableCoverage }}
    SITE_PACKAGES_DIR=$(python -m sysconfig | grep platlib | head -n 1 | cut -d '=' -f 2 | cut -d '"' -f 2)
    echo "Enabling coverage using pth file in SITE_PACKAGES_DIR=${SITE_PACKAGES_DIR}"
    echo 'import coverage; coverage.process_startup()' > "${SITE_PACKAGES_DIR}/coverage.pth"
    export COVERAGE_PROCESS_START=/diracx-coveragerc
    {{- end }}

    exec "$@"
  {{- if and .Values.developer.enabled .Values.developer.enableCoverage }}
  coveragerc: |
    [run]
    data_file=/coverage-reports/coverage
    relative_files=True
    parallel=True
    sigterm=True
    omit =
        */diracx/client/*
    include =
        */site-packages/diracx/*
        /{{ .Values.developer.sourcePath }}/*

    [paths]
    source =
        */src/
        */site-packages/
        /{{ .Values.developer.sourcePath }}/*/src/
        /{{ .Values.developer.sourcePath }}/*/*/src/
  {{- end }}
---
{{/* If we're collecting coverage we also need a volume to store it in */}}
{{- if and .Values.developer.enabled .Values.developer.enableCoverage }}
apiVersion: v1
kind: PersistentVolume
metadata:
  name: pv-coverage
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-3"
    "helm.sh/resource-policy": keep
spec:
  storageClassName: ""
  accessModes:
    - ReadWriteMany
  capacity:
    storage: 2Gi
  hostPath:
    path: /coverage-reports
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pvc-coverage
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-3"
    "helm.sh/resource-policy": keep
spec:
  storageClassName: ""
  volumeName: pv-coverage
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 1Gi
{{ end }}
