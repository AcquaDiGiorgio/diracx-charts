{{- if .Values.initSql.enabled }}

{{/* Define common volume mounts for reusability */}}
{{- $commonVolumeMounts := list }}
{{- $commonVolumeMounts = append $commonVolumeMounts (dict "mountPath" "/entrypoint.sh" "name" "container-entrypoint" "subPath" "entrypoint.sh") }}
{{- if and .Values.developer.enabled .Values.developer.enableCoverage }}
{{- $commonVolumeMounts = append $commonVolumeMounts (dict "mountPath" "/diracx-coveragerc" "name" "container-entrypoint" "subPath" "coveragerc") }}
{{- $commonVolumeMounts = append $commonVolumeMounts (dict "mountPath" "/coverage-reports" "name" "coverage-data" "readOnly" false) }}
{{- end }}
{{- if and .Values.developer.enabled .Values.developer.mountedPythonModulesToInstall }}
{{- $commonVolumeMounts = append $commonVolumeMounts (dict "mountPath" .Values.developer.sourcePath "name" "diracx-code-mount" "readOnly" true) }}
{{- range $module := .Values.developer.mountedPythonModulesToInstall }}
{{- if $.Values.developer.editableMountedPythonModules }}
{{- $commonVolumeMounts = append $commonVolumeMounts (dict "mountPath" (printf "%s/%s/src/%s.egg-info" $.Values.developer.sourcePath $module (replace "-" "_" (base $module))) "name" (printf "%s-editable-install" (base $module | lower)) "readOnly" false) }}
{{- else }}
{{- $commonVolumeMounts = append $commonVolumeMounts (dict "mountPath" (printf "%s/%s/build" $.Values.developer.sourcePath $module (replace "-" "_" (base $module))) "name" (printf "%s-editable-install" (base $module | lower)) "readOnly" false) }}
{{- end }}
{{- end }}
{{- end }}

apiVersion: batch/v1
kind: Job
metadata:
  name: {{ template "initSql.jobname" . }}
  namespace: {{ .Release.Namespace }}
  annotations:
    "helm.sh/hook": post-install,pre-upgrade
spec:
  ttlSecondsAfterFinished: {{ .Values.global.batchJobTTL }}
  activeDeadlineSeconds: {{ .Values.global.activeDeadlineSeconds }}
  template:
    metadata:
      annotations:
      {{- range $key, $value := .Values.initSql.annotations }}
        {{ $key }}: {{ $value | quote }}
      {{- end }}
    spec:
      restartPolicy: Never
      initContainers:
      {{- if .Values.mysql.enabled }}
        - name: wait-for-mysql
          image: {{ .Values.global.images.busybox.repository }}:{{ .Values.global.images.busybox.tag }}
          imagePullPolicy: IfNotPresent
          command: ['sh', '-c', 'until nc -vz {{ .Release.Name }}-mysql 3306; do echo "Waiting for mysql..."; sleep 3; done;']
      {{- else if .Values.postgresql.enabled }}
        - name: wait-for-postgresql
          image: busybox:latest
          imagePullPolicy: IfNotPresent
          command: ['sh', '-c', 'until nc -vz {{ .Release.Name }}-postgresql 5432; do echo "Waiting for postgresql..."; sleep 3; done;']
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.global.images.services }}:{{ .Values.global.images.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.global.imagePullPolicy }}
          command: ["/bin/bash", "/entrypoint.sh"]
          args: ["/bin/bash", "/scripts/init-sql"]
          volumeMounts:
            {{ toYaml $commonVolumeMounts | nindent 12 }}
            - name: scripts
              mountPath: /scripts
          env:
          {{- range $dbName,$dbSettings := .Values.diracx.sqlDbs.dbs }}
            - name: DIRACX_DB_URL_{{ $dbName | upper }}
              valueFrom:
                secretKeyRef:
                  name: diracx-sql-root-connection-urls
                  key: DIRACX_DB_URL_{{ $dbName | upper }}
          {{- end }}
          # The secrets are needed for the extension to appear
          resources:
            {{- toYaml .Values.initSql.resources | nindent 12 }}
      volumes:
      - name: scripts
        configMap:
          name: {{ template "initSql.fullname" . }}
      {{- if and .Values.developer.enabled .Values.developer.mountedPythonModulesToInstall }}
      - name: diracx-code-mount
        persistentVolumeClaim:
          claimName: pvc-diracx-code
      {{- range $module := .Values.developer.mountedPythonModulesToInstall }}
      - name: {{ base $module | lower }}-editable-install
        emptyDir:
          sizeLimit: 5Mi
      {{- end }}
      {{- end }}
      - name: container-entrypoint
        configMap:
          name: diracx-container-entrypoint
      {{- if and .Values.developer.enabled .Values.developer.enableCoverage }}
      - name: coverage-data
        persistentVolumeClaim:
          claimName: pvc-coverage
      {{- end }}
{{- end }}
